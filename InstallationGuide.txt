Awesome stack. Here’s a clean, step-by-step way to get **React (Vite) + Django REST + PostgreSQL** running in VS Code from a blank machine.

---

# 0) VS Code + Extensions

Install **VS Code**, then add these extensions:

* Python (Microsoft)
* Pylance
* Django
* ESLint
* Prettier
* Docker (optional)
* GitLens (optional)
* PostgreSQL (optional)

---

# 1) Install prerequisites (pick your OS)

**Windows (PowerShell)**

```powershell
winget install -e --id OpenJS.NodeJS.LTS
winget install -e --id Python.Python.3.12
winget install -e --id PostgreSQL.PostgreSQL
```

**macOS**

```bash
# Homebrew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install node python@3.12 postgresql
brew services start postgresql
```

**Ubuntu/Debian**

```bash
sudo apt update
sudo apt install -y curl ca-certificates gnupg lsb-release
# Node (via Nodesource or nvm; nvm shown)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
export NVM_DIR="$HOME/.nvm"; . "$NVM_DIR/nvm.sh"
nvm install --lts

sudo apt install -y python3 python3-venv python3-pip postgresql postgresql-contrib
sudo service postgresql start
```

> If `psql` isn’t on PATH, restart your terminal or add it to PATH.

---

# 2) Create the workspace

```bash
mkdir campus-events && cd campus-events
mkdir backend frontend
code .
```

---

# 3) Backend (Django + DRF + PostgreSQL)

## 3.1 Create and activate a virtual environment

```bash
cd backend
python -m venv .venv
# Windows
. .venv/Scripts/activate
# macOS/Linux
source .venv/bin/activate
```

## 3.2 Install packages

```bash
pip install --upgrade pip
pip install django djangorestframework psycopg2-binary python-dotenv corsheaders
```

## 3.3 Start Django project/app

```bash
django-admin startproject core .
python manage.py startapp api
```

## 3.4 Enable apps & middleware (core/settings.py)

```python
INSTALLED_APPS = [
    # ...
    "corsheaders",
    "rest_framework",
    "api",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    # ...
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite dev server
]
```

## 3.5 Environment variables

Create `backend/.env`:

```
DEBUG=True
SECRET_KEY=change-me
DB_NAME=campusevents
DB_USER=campususer
DB_PASSWORD=campuspass
DB_HOST=localhost
DB_PORT=5432
```

Load it in `core/settings.py`:

```python
from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

DEBUG = os.getenv("DEBUG", "False") == "True"
SECRET_KEY = os.getenv("SECRET_KEY")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}
```

## 3.6 Create the database/user (psql)

Open `psql`:

```bash
# Windows example
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U postgres
# macOS/Linux
psql -U postgres
```

Then:

```sql
CREATE USER campususer WITH PASSWORD 'campuspass';
CREATE DATABASE campusevents OWNER campususer;
GRANT ALL PRIVILEGES ON DATABASE campusevents TO campususer;
```

## 3.7 Simple API example

`backend/api/models.py`

```python
from django.db import models

class Event(models.Model):
    title = models.CharField(max_length=200)
    start_time = models.DateTimeField()
    location = models.CharField(max_length=200, blank=True)
    capacity = models.IntegerField(default=0)

    def __str__(self):
        return self.title
```

`backend/api/serializers.py`

```python
from rest_framework import serializers
from .models import Event

class EventSerializer(serializers.ModelSerializer):
    class Meta:
        model = Event
        fields = "__all__"
```

`backend/api/views.py`

```python
from rest_framework.viewsets import ModelViewSet
from .models import Event
from .serializers import EventSerializer

class EventViewSet(ModelViewSet):
    queryset = Event.objects.all().order_by("start_time")
    serializer_class = EventSerializer
```

`backend/core/urls.py`

```python
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from api.views import EventViewSet

router = DefaultRouter()
router.register(r"events", EventViewSet, basename="event")

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/", include(router.urls)),
]
```

Run migrations and create a superuser:

```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver 8000
```

Your API should be at `http://127.0.0.1:8000/api/events/`.

---

# 4) Frontend (React + Vite)

## 4.1 Create Vite app

```bash
cd ../frontend
npm create vite@latest . -- --template react
npm install
npm install axios
```

## 4.2 Add an API client

`frontend/src/api.js`

```javascript
import axios from "axios";

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "http://127.0.0.1:8000/api",
});

export default api;
```

Create `.env` in `frontend/` for dev:

```
VITE_API_URL=http://127.0.0.1:8000/api
```

## 4.3 Sample component

`frontend/src/App.jsx`

```jsx
import { useEffect, useState } from "react";
import api from "./api";

export default function App() {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    api.get("/events/").then((res) => setEvents(res.data));
  }, []);

  return (
    <main style={{ padding: 24 }}>
      <h1>Campus Events</h1>
      <ul>
        {events.map((e) => (
          <li key={e.id}>
            <strong>{e.title}</strong> — {new Date(e.start_time).toLocaleString()}
          </li>
        ))}
      </ul>
    </main>
  );
}
```

## 4.4 Run the frontend

```bash
npm run dev
```

Vite runs on `http://localhost:5173`.

---

## Using the provided helper scripts (recommended for teammates)

To speed up onboarding on Windows (PowerShell), this repository includes two helper scripts under `scripts/` that wrap the common setup and run steps:

- `scripts/start-backend.ps1` — creates or reuses `backend/.venv`, installs Python dependencies from `backend/requirements.txt`, runs migrations, and starts Django on port 8000.
- `scripts/start-frontend.ps1` — installs frontend dependencies (if `node_modules` is missing) and starts the Vite dev server.

Quick usage (from the repository root, PowerShell):

```powershell
# Start the backend (creates venv if needed, installs deps, applies migrations, runs dev server)
Set-Location -Path 'C:\path\to\your\repo\SOEN-341-Events-Web-App'
.\scripts\start-backend.ps1

# In a separate terminal, start the frontend
Set-Location -Path 'C:\path\to\your\repo\SOEN-341-Events-Web-App'
.\scripts\start-frontend.ps1
```

Notes:

- If you prefer SQLite for local development the project defaults to `USE_SQLITE=1` in `collegeEventsWeb/settings.py`. To use PostgreSQL, create `backend/.env` (based on `backend/.env.example`), set `USE_SQLITE=0`, and populate the `POSTGRES_*` variables before running `start-backend.ps1`.
- The `.vscode/launch.json` compound configuration is provided if your teammates prefer to start both servers from the VS Code Run panel (`Run Frontend + Backend`).
- The scripts are PowerShell-first; macOS/Linux users should follow the manual commands earlier in this guide.

## Git / onboarding tips for teammates

1. Clone the repository and create a working branch:

```bash
git clone <repo-url>
cd SOEN-341-Events-Web-App
git checkout -b feat/your-feature-name
```

2. Start the servers using the scripts above (or run the manual commands in this guide).

3. Commit only source and configuration files. The repository `.gitignore` files (root, `backend/.gitignore`, and `frontend/.gitignore`) ignore local artifacts such as `node_modules/`, `.env`, and `.venv` so they won't be committed.

4. When opening a pull request, include a short description of your changes, any migration steps, and any environment variables teammates need to add to their local `backend/.env` (never commit real secrets).


# 5) VS Code: Debug both servers

In the project root, create `.vscode/launch.json`:

```json
{
  "version": "0.2.0",
  "compounds": [
    {
      "name": "Run Frontend + Backend",
      "configurations": ["Django Server", "Vite Dev Server"]
    }
  ],
  "configurations": [
    {
      "name": "Django Server",
      "type": "python",
      "request": "launch",
      "program": "${workspaceFolder}/backend/manage.py",
      "args": ["runserver", "8000"],
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/backend",
      "envFile": "${workspaceFolder}/backend/.env"
    },
    {
      "name": "Vite Dev Server",
      "type": "node",
      "request": "launch",
      "cwd": "${workspaceFolder}/frontend",
      "runtimeExecutable": "npm",
      "runtimeArgs": ["run", "dev"]
    }
  ]
}
```

Now start **Run Frontend + Backend** from the Run/Debug panel.

---

# 6) Quality of life

**Backend formatting/linting**

```bash
pip install black isort flake8
```

Add (optional) in `pyproject.toml`:

```toml
[tool.black]
line-length = 100
```

**Frontend linting/formatting**

```bash
cd frontend
npm i -D eslint eslint-plugin-react eslint-plugin-react-hooks @eslint/js eslint-config-prettier prettier
```

---


---

## Troubleshooting (Windows / PowerShell)

These are direct fixes and PowerShell-specific tips for issues encountered while following this guide on Windows.

- Problem: virtualenv points to a missing Python executable (common when a venv was created with a different interpreter or on another machine)
  - Symptom: activation or running the venv's python fails with an error like "No Python at 'C:\...\Python312\python.exe'" or `pyvenv.cfg` contains a `home = ...` pointing to a non-existent path.
  - Fix: recreate the venv with your current system Python (safe and quick). From the `backend` folder run:

```powershell
# remove and recreate the virtual environment
Set-Location -Path 'C:\path\to\your\project\backend'
Remove-Item -Recurse -Force .\.venv
python -m venv .venv

# update pip and install backend deps into the new venv
& '.\.venv\Scripts\python.exe' -m pip install --upgrade pip setuptools wheel
& '.\.venv\Scripts\pip.exe' install django djangorestframework psycopg2-binary python-dotenv django-cors-headers
```

- PowerShell activation notes
  - If Activate.ps1 is blocked, allow it for the session:

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force
. .\.venv\Scripts\Activate.ps1
```

- Running Django commands from PowerShell
  - When calling the venv python by path, use the call operator `&` so PowerShell parses the command correctly:

```powershell
Set-Location -Path 'C:\path\to\your\project\backend\collegeEventsWeb'
& 'C:\path\to\your\project\backend\.venv\Scripts\python.exe' manage.py makemigrations
& 'C:\path\to\your\project\backend\.venv\Scripts\python.exe' manage.py migrate --noinput
```

  - To start the dev server in the background from PowerShell (detached), use Start-Process:

```powershell
Start-Process -NoNewWindow -FilePath 'C:\path\to\your\project\backend\.venv\Scripts\python.exe' -ArgumentList 'manage.py','runserver','0.0.0.0:8000'
```

- PowerShell operator differences
  - PowerShell does not support shell operators like `||` and `&&` in the same way as bash. Use separate commands or PowerShell conditional statements instead.

- npm / Start-Process quirks on Windows
  - If `Start-Process -FilePath 'npm' -ArgumentList 'run','dev'` fails with "%1 is not a valid Win32 application", run npm via `cmd` or run `npm run dev` directly in an interactive terminal:

```powershell
# start Vite in a new cmd process (detached)
cmd /c "cd /d C:\path\to\your\project\frontend && npm run dev"

# or just run in the active PowerShell terminal (recommended while developing)
Set-Location -Path 'C:\path\to\your\project\frontend'
npm run dev
```

- Quick checks
  - Check your system Python version:

```powershell
py -3 --version
python --version
```

  - Inspect the venv config if something looks off:

```powershell
Get-Content .\.venv\pyvenv.cfg
```

If `pyvenv.cfg` shows a `home =` path that doesn't exist on your machine, recreate the venv as shown above.

---

If you'd like, I can append these PowerShell-ready commands into a tiny `scripts/` folder (two PowerShell scripts: `start-backend.ps1` and `start-frontend.ps1`) or add a `.vscode/launch.json` compound configuration so you can start both servers from the Run panel. Tell me which you prefer and I'll add it.
# 7) (Optional) Docker Compose (one command dev)

Create `docker-compose.yml` in the root if you want containers later. If you want this, say the word and I’ll drop a ready-to-run compose with services for **postgres**, **backend (gunicorn)**, and **frontend (nginx)** plus dev overrides.

---

# 8) What to run each time

**Terminal 1**

```bash
# backend
cd backend
. .venv/Scripts/activate   # or: source .venv/bin/activate
cd collegeEventsWeb
python manage.py runserver 8000
```

**Terminal 2**

```bash
# frontend
cd frontend
npm run dev
```


Quickstart — React (Vite) + Django REST (PowerShell-friendly)

This quick guide gets a teammate from a fresh clone to a running local dev environment (backend + frontend) on Windows PowerShell. It keeps commands copy-pasteable and focuses on the most common tasks.

Prerequisites
- Node.js (LTS), Python 3.11+ (3.12 recommended), Git.
- Optional: PostgreSQL for DB testing; the project defaults to SQLite for local dev.

1) Clone and open the repo
```powershell
git clone <repo-url>
cd SOEN-341-Events-Web-App
code .
```

2) Backend quickstart (Django)
- Create and activate the venv (one-time per machine):
```powershell
cd backend\collegeEventsWeb
# create venv if missing
python -m venv .venv
# activate for this session
.\.venv\Scripts\Activate.ps1
```

- Install dependencies (manual; the `scripts/start-backend.ps1` also automates this):
```powershell
& '.\.venv\Scripts\python.exe' -m pip install --upgrade pip setuptools wheel
if (Test-Path requirements.txt) {
  & '.\.venv\Scripts\pip.exe' install -r requirements.txt
} else {
  & '.\.venv\Scripts\pip.exe' install django==5.2.7 djangorestframework django-cors-headers djangorestframework-simplejwt python-dotenv
}
```

- Apply migrations and create a superuser (interactive):
```powershell
& '.\.venv\Scripts\python.exe' manage.py makemigrations
& '.\.venv\Scripts\python.exe' manage.py migrate --noinput
& '.\.venv\Scripts\python.exe' manage.py createsuperuser --email you@example.com
```

- Start the dev server:
```powershell
& '.\.venv\Scripts\python.exe' manage.py runserver 8000
```

Notes
- Admin UI: http://127.0.0.1:8000/admin/
- API roots present in this project: /api/events/, /api/users/, /api/tickets/

3) Frontend quickstart (Vite + React)
- In a separate terminal (repo root):
```powershell
cd frontend
npm install   # first run only
npm run dev
```
- Vite runs at http://localhost:5173 by default (may use 5174 if 5173 is busy).

4) Helper scripts (recommended)
- Use the repo helper scripts to start dev servers quickly:
```powershell
# from repo root
.\scripts\start-backend.ps1
.\scripts\start-frontend.ps1  # in a second terminal
```

5) Admin & create_admin patterns (safe)
- Interactive (recommended):
  - `manage.py createsuperuser` — prompts for email/name/password.
- Non-interactive automation pattern (session env vars, recommended over hardcoding):
```powershell
# set session vars (or read from secret manager)
$env:NEW_ADMIN_EMAIL='admin@example.com'
$env:NEW_ADMIN_NAME='Admin Name'
$env:NEW_ADMIN_PASSWORD='S3cureP@ssw0rd'  # prefer Read-Host or secret store

cd backend\collegeEventsWeb
.\.venv\Scripts\Activate.ps1
& '.\.venv\Scripts\python.exe' - <<'PY'
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','collegeEventsWeb.settings')
import django; django.setup()
from user_accounts.models import User
email=os.environ.get('NEW_ADMIN_EMAIL')
name=os.environ.get('NEW_ADMIN_NAME')
password=os.environ.get('NEW_ADMIN_PASSWORD')
if not User.objects.filter(email=email).exists():
    User.objects.create_superuser(email=email, name=name, password=password)
    print('Superuser created:', email)
else:
    u = User.objects.get(email=email)
    u.set_password(password)
    u.role = User.Role.ADMIN
    u.status = User.Status.ACTIVE
    u.is_staff = True
    u.is_superuser = True
    u.save()
    print('User promoted to superuser (password updated):', email)
PY
```

- There is a `create_admin.py` template in the repo root — do not commit passwords into it. Prefer reading secrets from the environment or a secure vault.

6) Discovering routes (list all URL patterns)
- Option A — django-extensions (dev only):
```powershell
cd backend\collegeEventsWeb
.\.venv\Scripts\Activate.ps1
& '.\.venv\Scripts\pip.exe' install django-extensions
# add 'django_extensions' to INSTALLED_APPS in settings.py (dev only)
& '.\.venv\Scripts\python.exe' manage.py show_urls
```

- Option B — inline (no extra deps):
```powershell
cd backend\collegeEventsWeb
.\.venv\Scripts\Activate.ps1
& '.\.venv\Scripts\python.exe' - <<'PY'
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','collegeEventsWeb.settings')
import django; django.setup()
from django.urls import get_resolver
for p in get_resolver().url_patterns:
    print(p)
PY
```

- Option C — add DRF OpenAPI + docs (I can add `/openapi/` and `/docs/` for a browsable API catalog).

7) How to call the API
- Use browser (DRF browsable UI) or curl / Invoke-RestMethod:
```powershell
Invoke-RestMethod -Uri http://127.0.0.1:8000/api/events/ -Method GET
```
- Login via API:
POST to `/api/users/login` with JSON `{"email":"...","password":"..."}` — the project returns tokens and sets an HttpOnly cookie as configured.

8) Troubleshooting (PowerShell tips)
- Allow activation for session if blocked:
```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force
. .\.venv\Scripts\Activate.ps1
```
- Recreate a broken venv:
```powershell
Remove-Item -Recurse -Force .\.venv
python -m venv .venv
& '.\.venv\Scripts\python.exe' -m pip install --upgrade pip setuptools wheel
& '.\.venv\Scripts\pip.exe' install -r requirements.txt
```
- Ensure temp scripts are UTF-8 without BOM when piping into `manage.py shell`:
```powershell
[System.IO.File]::WriteAllText('create_admin.py', $scriptContents, (New-Object System.Text.UTF8Encoding($false)))
```

9) Improvements I can add (pick one)
- Convert `create_admin.py` into a management command `manage.py create_admin --email ...` (recommended).
- Add DRF OpenAPI + docs endpoints (`/openapi/`, `/docs/`).
- Add a custom management command `show_urls` to print a friendly list of routes.

Tell me which improvement you want and I will implement and verify it locally.

--

Quick demo: the repository now provides a management command and a safe PowerShell wrapper.

1) Direct (management command)
```powershell
cd backend\collegeEventsWeb
.\.venv\Scripts\Activate.ps1
& '.\.venv\Scripts\python.exe' manage.py create_admin --email admin@concordia.ca --name 'Admin Concordia'
# Omit --password to be prompted securely.
```

2) Wrapper (prompts securely)
```powershell
# from repo root
.\scripts\create-admin.ps1
```

Note: this repository contains multiple Django project folders in history. The canonical dev project is
`backend/collegeEventsWeb` — all `manage.py` commands shown in this guide assume you are in that directory
or explicitly call that `manage.py`. If you see an older `manage.py` under `backend/`, it is legacy and may be
archived or removed to avoid confusion.


